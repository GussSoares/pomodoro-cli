{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#pomodoro-cli","title":"Pomodoro CLI \u23f3","text":"<p>A simple and practical Pomodoro tool for your terminal! \ud83d\udcf1\ud83d\udcbb</p> <p>Organize your time efficiently with countdowns and sound alerts. Perfect for boosting productivity with focus and breaks! \ud83d\ude80</p>"},{"location":"#features","title":"Features:","text":"<ul> <li>Start, pause, and restart  Pomodoro cycles \ud83c\udf45\u23f3</li> <li>Sound notifications to keep you on track \ud83d\udd14</li> <li>Customizable work and break durations \u23f0</li> <li>Simple and intuitive terminal interface \ud83d\udcbb</li> <li>Self update command to be your pomodoro always up to dated \u2705</li> </ul>"},{"location":"#installation","title":"Installation:","text":"<p>You can install Pomodoro CLI directly from PyPI using pip:  </p> PipPipx Bash<pre><code>pip install pomodoro-app-cli\n</code></pre> Bash<pre><code>pipx install pomodoro-app-cli\n</code></pre>"},{"location":"#usage","title":"Usage:","text":"<p>Start your Pomodoro session by running:</p> Bash<pre><code>pomodoro\n</code></pre>"},{"location":"#license","title":"License:","text":"<p>This project is licensed under the MIT License - see the LICENSE file for details. \ud83d\udcdc</p>"},{"location":"api/config/","title":"Config","text":""},{"location":"api/config/#pomodoro.config.Config","title":"<code>Config</code>","text":"<p>Config class for CLI</p> <p>Methods:</p> Name Description <code>get_minutes</code> <p>Execute a inquirer promp to receive minutes with validations </p> <code>config</code> <p>Confirm if you are sure of your answers</p> <code>set_config</code> <p>Show a pretty prompt for user pass minutes to work, minutes to rest and confirm it</p> Source code in <code>pomodoro/config.py</code> Python<pre><code>class Config:\n    \"\"\"\n    Config class for CLI\n\n    Methods:\n        get_minutes() -&gt; str: Execute a inquirer promp to receive minutes with validations \n        config() -&gt; bool: Confirm if you are sure of your answers\n        set_config() -&gt; None: Show a pretty prompt for user pass minutes to work, minutes to rest and confirm it\n    \"\"\"\n\n    @staticmethod\n    def get_minutes(message: str, start: int, end: int, default: str = '25'):\n        \"\"\"\n        Execute a inquirer promp to receive minutes with validations\n\n        Attributes:\n            message (str): a message to show in prompt\n            start (int): the min value to validate like a interval\n            start (int): the max value to validate like a interval\n            default (str): the default value if user no pass nothing\n\n        Returns:\n            minutes (str): the value prompted by user\n        \"\"\"\n        return inquirer.text(\n            message=message,\n            default=default,\n            validate=ValidateMinute(interval_start=start, interval_end=end)\n        ).execute()\n\n    @staticmethod\n    def confirm():\n        \"\"\"\n        Confirm if you are sure of your answers\n\n        Returns:\n            confirm (bool): True if user confirm and False if user abort\n        \"\"\"\n        return inquirer.confirm('Are you sure?').execute()\n\n    def set_config(self, func, *args, **kwargs):\n        \"\"\"\n        Show a pretty prompt for user pass minutes to work, minutes to rest and confirm it\n\n        Attributes:\n            func (function): a function to execute after confirm prompt\n            *args (tuple): arguments for function passed\n            **kwargs (dict): arguments for function passed\n        \"\"\"\n        console.rule('Pomodoro Customization')\n\n        minutes_to_work = self.get_minutes(\n            message='Type minutes to work: ',\n            default='25',\n            start=25,\n            end=35\n        )\n        minutes_to_rest = self.get_minutes(\n            message='Type minutes to rest: ',\n            default='5',\n            start=5,\n            end=15\n        )\n\n        if self.confirm():\n            with console.status('Please wait...'):\n                func(minutes_to_work, minutes_to_rest)\n            console.print('[green]Finished![/]')\n\n    def update(self, func):\n        \"\"\"\n        Show a pretty prompt for update your pomodoro\n\n        Attributes:\n            func (function): a function to execute your update \n        \"\"\"\n        with console.status('Updating. Please wait...'):\n            func()\n        console.print('[green]Finished![/]')\n</code></pre>"},{"location":"api/config/#pomodoro.config.Config.confirm","title":"<code>confirm()</code>  <code>staticmethod</code>","text":"<p>Confirm if you are sure of your answers</p> <p>Returns:</p> Name Type Description <code>confirm</code> <code>bool</code> <p>True if user confirm and False if user abort</p> Source code in <code>pomodoro/config.py</code> Python<pre><code>@staticmethod\ndef confirm():\n    \"\"\"\n    Confirm if you are sure of your answers\n\n    Returns:\n        confirm (bool): True if user confirm and False if user abort\n    \"\"\"\n    return inquirer.confirm('Are you sure?').execute()\n</code></pre>"},{"location":"api/config/#pomodoro.config.Config.get_minutes","title":"<code>get_minutes(message, start, end, default='25')</code>  <code>staticmethod</code>","text":"<p>Execute a inquirer promp to receive minutes with validations</p> <p>Attributes:</p> Name Type Description <code>message</code> <code>str</code> <p>a message to show in prompt</p> <code>start</code> <code>int</code> <p>the min value to validate like a interval</p> <code>start</code> <code>int</code> <p>the max value to validate like a interval</p> <code>default</code> <code>str</code> <p>the default value if user no pass nothing</p> <p>Returns:</p> Name Type Description <code>minutes</code> <code>str</code> <p>the value prompted by user</p> Source code in <code>pomodoro/config.py</code> Python<pre><code>@staticmethod\ndef get_minutes(message: str, start: int, end: int, default: str = '25'):\n    \"\"\"\n    Execute a inquirer promp to receive minutes with validations\n\n    Attributes:\n        message (str): a message to show in prompt\n        start (int): the min value to validate like a interval\n        start (int): the max value to validate like a interval\n        default (str): the default value if user no pass nothing\n\n    Returns:\n        minutes (str): the value prompted by user\n    \"\"\"\n    return inquirer.text(\n        message=message,\n        default=default,\n        validate=ValidateMinute(interval_start=start, interval_end=end)\n    ).execute()\n</code></pre>"},{"location":"api/config/#pomodoro.config.Config.set_config","title":"<code>set_config(func, *args, **kwargs)</code>","text":"<p>Show a pretty prompt for user pass minutes to work, minutes to rest and confirm it</p> <p>Attributes:</p> Name Type Description <code>func</code> <code>function</code> <p>a function to execute after confirm prompt</p> <code>*args</code> <code>tuple</code> <p>arguments for function passed</p> <code>**kwargs</code> <code>dict</code> <p>arguments for function passed</p> Source code in <code>pomodoro/config.py</code> Python<pre><code>def set_config(self, func, *args, **kwargs):\n    \"\"\"\n    Show a pretty prompt for user pass minutes to work, minutes to rest and confirm it\n\n    Attributes:\n        func (function): a function to execute after confirm prompt\n        *args (tuple): arguments for function passed\n        **kwargs (dict): arguments for function passed\n    \"\"\"\n    console.rule('Pomodoro Customization')\n\n    minutes_to_work = self.get_minutes(\n        message='Type minutes to work: ',\n        default='25',\n        start=25,\n        end=35\n    )\n    minutes_to_rest = self.get_minutes(\n        message='Type minutes to rest: ',\n        default='5',\n        start=5,\n        end=15\n    )\n\n    if self.confirm():\n        with console.status('Please wait...'):\n            func(minutes_to_work, minutes_to_rest)\n        console.print('[green]Finished![/]')\n</code></pre>"},{"location":"api/config/#pomodoro.config.Config.update","title":"<code>update(func)</code>","text":"<p>Show a pretty prompt for update your pomodoro</p> <p>Attributes:</p> Name Type Description <code>func</code> <code>function</code> <p>a function to execute your update</p> Source code in <code>pomodoro/config.py</code> Python<pre><code>def update(self, func):\n    \"\"\"\n    Show a pretty prompt for update your pomodoro\n\n    Attributes:\n        func (function): a function to execute your update \n    \"\"\"\n    with console.status('Updating. Please wait...'):\n        func()\n    console.print('[green]Finished![/]')\n</code></pre>"},{"location":"api/config/#pomodoro.config.ValidateMinute","title":"<code>ValidateMinute</code>","text":"<p>               Bases: <code>Validator</code></p> <p>ValidateMinute created to validate minutes in interval passed by user</p> <p>Attributes:</p> Name Type Description <code>interval_start</code> <code>int</code> <p>initial value</p> <code>interval_end</code> <code>int</code> <p>end value</p> <p>Methods:</p> Name Description <code>validate</code> <p>return <code>True</code> for valid input</p> Source code in <code>pomodoro/config.py</code> Python<pre><code>class ValidateMinute(Validator):\n    \"\"\"\n    ValidateMinute created to validate minutes in interval passed by user\n\n    Attributes:\n        interval_start (int): initial value\n        interval_end (int): end value\n\n    Methods:\n        validate() -&gt; bool: return `True` for valid input\n    \"\"\"\n    def __init__(self, interval_start: int, interval_end: int):\n        super().__init__()\n        self.interval_start = interval_start\n        self.interval_end = interval_end\n\n    def validate(self, document):\n        \"\"\"\n        Validate input passed by user\n\n        Attributes:\n            document (Document): implicit attribute that contains input and position cursor\n\n        Returns:\n            validation (bool): return `True` if valid input\n\n        Raises:\n            ValidationError: Must be a number\n            ValidationError: Required field\n            ValidationError: Must between min and max\n        \"\"\"\n        if not document.text.isnumeric():\n            raise ValidationError(\n                message='Must be a number',\n                cursor_position=document.cursor_position\n            )\n        if not len(document.text):\n            raise ValidationError(\n                message='Required field',\n                cursor_position=document.cursor_position\n            )\n        if not (self.interval_start &lt;= int(document.text) &lt;= self.interval_end):\n            raise ValidationError(\n                message=f'Must be between {self.interval_start} and {self.interval_end}',\n                cursor_position=document.cursor_position\n            )\n        return True\n</code></pre>"},{"location":"api/config/#pomodoro.config.ValidateMinute.validate","title":"<code>validate(document)</code>","text":"<p>Validate input passed by user</p> <p>Attributes:</p> Name Type Description <code>document</code> <code>Document</code> <p>implicit attribute that contains input and position cursor</p> <p>Returns:</p> Name Type Description <code>validation</code> <code>bool</code> <p>return <code>True</code> if valid input</p> <p>Raises:</p> Type Description <code>ValidationError</code> <p>Must be a number</p> <code>ValidationError</code> <p>Required field</p> <code>ValidationError</code> <p>Must between min and max</p> Source code in <code>pomodoro/config.py</code> Python<pre><code>def validate(self, document):\n    \"\"\"\n    Validate input passed by user\n\n    Attributes:\n        document (Document): implicit attribute that contains input and position cursor\n\n    Returns:\n        validation (bool): return `True` if valid input\n\n    Raises:\n        ValidationError: Must be a number\n        ValidationError: Required field\n        ValidationError: Must between min and max\n    \"\"\"\n    if not document.text.isnumeric():\n        raise ValidationError(\n            message='Must be a number',\n            cursor_position=document.cursor_position\n        )\n    if not len(document.text):\n        raise ValidationError(\n            message='Required field',\n            cursor_position=document.cursor_position\n        )\n    if not (self.interval_start &lt;= int(document.text) &lt;= self.interval_end):\n        raise ValidationError(\n            message=f'Must be between {self.interval_start} and {self.interval_end}',\n            cursor_position=document.cursor_position\n        )\n    return True\n</code></pre>"},{"location":"api/constants/","title":"Constants","text":"<p>This page presents the all classes with constants used in pomodoro application</p>"},{"location":"api/constants/#pomodoro.constants.Constants","title":"<code>Constants</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Enum to list all constant values relacted with times</p> <p>Attributes:</p> Name Type Description <code>MINUTES_TO_WORK</code> <code>int</code> <p>repr the time to work</p> <code>MINUTES_TO_REST</code> <code>int</code> <p>repr the time to rest after work time</p> <code>MINUTES_TO_LONG_REST</code> <code>int</code> <p>repr the long time to rest after one full pomodoro cycle</p> Source code in <code>pomodoro/constants.py</code> Python<pre><code>class Constants(Enum):\n    \"\"\"Enum to list all constant values relacted with times\n\n    Attributes:\n        MINUTES_TO_WORK (int): repr the time to work\n        MINUTES_TO_REST (int): repr the time to rest after work time\n        MINUTES_TO_LONG_REST (int): repr the long time to rest after one full pomodoro cycle\n    \"\"\"\n    MINUTES_TO_WORK = 25\n    MINUTES_TO_REST = 5\n    MINUTES_TO_LONG_REST = 15\n</code></pre>"},{"location":"api/constants/#pomodoro.constants.Messages","title":"<code>Messages</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Enum to list all messages used in all the pomodoro app</p> <p>Attributes:</p> Name Type Description <code>WELCOME</code> <code>str</code> <p>Welcome to Pomodoro CLI </p> <code>REST</code> <code>str</code> <p>Do a pause now!</p> <code>PAUSE</code> <code>str</code> <p>PAUSED!</p> <code>NOTIFY_PAUSE</code> <code>str</code> <p>\u23f0 Your pomodoro is paused!</p> <code>NOTIFY_READY</code> <code>str</code> <p>\u2728 Your pomodoro is ready!</p> <code>WORK</code> <code>str</code> <p>Back to work now!</p> <code>STATUSBAR</code> <code>str</code> <p>Press 'q' or 'ctrl + c' to exit | Press 'p' to pause</p> Source code in <code>pomodoro/constants.py</code> Python<pre><code>class Messages(Enum):\n    \"\"\"Enum to list all messages used in all the pomodoro app\n\n    Attributes:\n        WELCOME (str): Welcome to Pomodoro CLI \n        REST (str): Do a pause now!\n        PAUSE (str): PAUSED!\n        NOTIFY_PAUSE (str): \u23f0 Your pomodoro is paused!\n        NOTIFY_READY (str): \u2728 Your pomodoro is ready!\n        WORK (str): Back to work now!\n        STATUSBAR (str): Press 'q' or 'ctrl + c' to exit | Press 'p' to pause\n    \"\"\"\n    WELCOME = \" Welcome to Pomodoro CLI \"\n    REST = \"Do a pause now!\"\n    PAUSE = \"PAUSED!\"\n    NOTIFY_PAUSE = \"\u23f0 Your pomodoro is paused!\"\n    NOTIFY_READY = \"\u2728 Your pomodoro is ready!\"\n    WORK = \"Back to work now!\"\n    STATUSBAR = \"Press 'q' or 'ctrl + c' to exit | Press 'p' to pause\"\n</code></pre>"},{"location":"api/main/","title":"Main","text":"<p>This page presents the principal</p>"},{"location":"api/main/#pomodoro.main.init_args","title":"<code>init_args()</code>","text":"<p>Initialize arguments and return arg parser</p> <p>Attributes:</p> Name Type Description <code>-r,--restore</code> <code>bool</code> <p>restore previous pomodoro closed</p> <code>-m,--mute</code> <code>bool</code> <p>mute pomodoro alarms</p> <code>-c,--config</code> <code>bool</code> <p>configure times to your custom values</p> <code>-u,--update</code> <code>bool</code> <p>update your pomodoro app version</p> <code>-v,--version</code> <code>bool</code> <p>show current version</p> <p>Returns:</p> Name Type Description <code>parser</code> <code>Namespace</code> <p>a object with all arguments</p>"},{"location":"api/main/#pomodoro.main.init_args--example","title":"Example","text":"Python<pre><code>args = init_args()\nargs.restore\nTrue\n</code></pre> Source code in <code>pomodoro/main.py</code> Python<pre><code>def init_args() -&gt; argparse.Namespace:\n    \"\"\"\n    Initialize arguments and return arg parser\n\n    Attributes:\n        -r,--restore (bool): restore previous pomodoro closed\n        -m,--mute (bool): mute pomodoro alarms\n        -c,--config (bool): configure times to your custom values\n        -u,--update (bool): update your pomodoro app version\n        -v,--version (bool): show current version\n\n    Returns:\n        parser (Namespace): a object with all arguments\n\n    Example\n    -------\n    ``` python\n    args = init_args()\n    args.restore\n    True\n    ```\n    \"\"\"\n    parser = argparse.ArgumentParser()\n\n    parser.add_argument('-r', '--restore', action='store_true', help='restore previous pomodoro closed')\n    parser.add_argument('-m', '--mute', action='store_true', help='mute pomodoro alarms')\n    parser.add_argument('-c', '--config', action='store_true', help='configure times to your custom values')\n    parser.add_argument('-u', '--update', action='store_true', help='update your pomodoro app version')\n    parser.add_argument('-v', '--version', action='store_true', help='show current version')\n\n    return parser.parse_args()\n</code></pre>"},{"location":"api/main/#pomodoro.main.version","title":"<code>version()</code>","text":"<p>Print the current app version</p>"},{"location":"api/main/#pomodoro.main.version--example","title":"Example","text":"Bash<pre><code>pomodoro --version\n\u2728 1.0.0\n</code></pre> Source code in <code>pomodoro/main.py</code> Python<pre><code>def version() -&gt; None:\n    \"\"\"\n    Print the current app version\n\n    Example\n    -------\n    ``` sh\n    pomodoro --version\n    \u2728 1.0.0\n    ```\n    \"\"\"\n    print(f'\u2728 {importlib.metadata.version(\"pomodoro-app-cli\")}')\n    sys.exit()\n</code></pre>"},{"location":"api/pomodoro/","title":"Pomodoro","text":"<p>Presentation</p> <p>You will read below about main pomodoro class, describing all methods, attributes and examples</p> <p>Author: Gustavo Soares</p>"},{"location":"api/pomodoro/#pomodoro.Pomodoro","title":"<code>Pomodoro</code>","text":"<p>Pomodoro Application</p> <p>This class is responsible by run the pomodoro in terminal, showing clock, update screen second by second. The main funcionalities are: play, pause, resume, mute and config</p> <p>Attributes:</p> Name Type Description <code>restore</code> <code>bool</code> <p>restore the last pomodoro time whe you close accidentally</p> <code>mute</code> <code>bool</code> <p>mute the song when pomodoro its time</p> <code>no_interface</code> <code>bool</code> <p>use this flag only whe no need show curse interface. Ex: config command</p> <p>Methods:</p> Name Description <code>version</code> <code>update</code> <code>play_audio</code> <code>notify</code> <code>init_config_file</code> <code>prompt_config</code> <code>get_config</code> <code>set_config</code> <code>set_custom_time</code> <code>save</code> <code>update_clock</code> <code>get_center_xpos</code> <code>get_center_ypos</code> <code>write_work_message</code> <code>init_panel</code> <code>main</code> <code>start</code> Source code in <code>pomodoro/__init__.py</code> Python<pre><code>class Pomodoro:\n    \"\"\"\n    Pomodoro Application\n\n    This class is responsible by run the pomodoro in terminal, showing clock, update screen second by second.\n    The main funcionalities are: play, pause, resume, mute and config\n\n\n    Attributes:\n        restore (bool): restore the last pomodoro time whe you close accidentally\n        mute (bool): mute the song when pomodoro its time\n        no_interface (bool): use this flag only whe no need show curse interface. Ex: config command\n\n    Methods:\n        version() -&gt; str:\n        update() -&gt; None:\n        play_audio() -&gt; None:\n        notify() -&gt; None:\n        init_config_file() -&gt; None:\n        prompt_config() -&gt; None:\n        get_config() -&gt; ConfigParser:\n        set_config() -&gt; None:\n        set_custom_time() -&gt; None:\n        save() -&gt; None:\n        update_clock() -&gt; None:\n        get_center_xpos() -&gt; int:\n        get_center_ypos() -&gt; int:\n        write_work_message() -&gt; None:\n        init_panel() -&gt; None:\n        main() -&gt; None:\n        start() -&gt; None:\n    \"\"\"\n    def __init__(self, restore: bool = False, mute: bool = False, no_interface: bool = False):\n        self.mute = mute\n        self.pause = False\n        self.rest = False\n        self.minute = 0\n        self.second = 0\n        self.loop = 0\n        self.init_config_file()\n        self.config = self.get_config()\n\n        if restore:\n            self.pause = eval(self.config['Settings']['pause'])\n            self.rest = eval(self.config['Settings']['rest'])\n            self.minute = eval(self.config['Settings']['minute'])\n            self.second = eval(self.config['Settings']['second'])\n\n        if no_interface:\n            return\n\n        self.window = curses.initscr()\n        self.window.nodelay(True)\n\n        curses.start_color()\n        curses.init_pair(1, curses.COLOR_GREEN, curses.COLOR_BLACK)\n        curses.init_pair(2, curses.COLOR_RED, curses.COLOR_BLACK)\n        curses.init_pair(3, curses.COLOR_BLACK, curses.COLOR_WHITE)\n\n    @property\n    def max_y(self):\n        return self.window.getmaxyx()[0]\n\n    @property\n    def max_x(self):\n        return self.window.getmaxyx()[1]\n\n    @property\n    def minutes_to_work(self):\n        return self.config['CustomTime']['work_time']\n\n    @property\n    def minutes_to_rest(self):\n        return self.config['CustomTime']['rest_time']\n\n    @property\n    def info_message(self):\n        if self.pause:\n            return Messages.PAUSE.value\n        if self.rest:\n            return Messages.REST.value\n        return Messages.WORK.value\n\n    @staticmethod\n    def version(show: bool = False) -&gt; str:\n        \"\"\"\n        Return or print the current version of pomodoro\n\n        Attributes:\n            show (bool): return version and print in screen\n\n        Returns:\n            version (str): the version number\n        \"\"\"\n        version = importlib.metadata.version(\"pomodoro-app-cli\")\n        if show:\n            print(f'\u2728 {version}')\n        return version\n\n    @staticmethod\n    def update() -&gt; None:\n        \"\"\"\n        Update the pomodoro application like:\n\n        !!! tip \"Code used\"\n            ``` sh\n            pip install --upgrade pomodoro-app-cli\n            ```\n        \"\"\"\n        Config().update(lambda: subprocess.check_output(['pip', 'install', '--upgrade', 'pomodoro-app-cli', '--break-system-packages']))\n        Pomodoro.version(show=True)\n        # subprocess.Popen(['pip', 'install', '--upgrade', 'pomodoro-app-cli', '--break-system-packages'])\n        sys.exit()\n\n    def play_audio(self):\n        \"\"\"\n        Play sound of audio.wav using aplay linux command like:\n\n        !!! tip \"Code used\"\n            ```sh\n            aplay audio.wav --duration 2\n            ```\n        \"\"\"\n        subprocess.Popen(['aplay', f'{PACKAGE_DIR}/audio.wav', '--duration', '2'], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)\n\n    def notify(self, message: str):\n        \"\"\"Show a popup notification in linux using notify-send\n\n        Args:\n            message (str): message to show in notification popup\n\n        !!! tip \"Code used\"\n\n            ```sh\n            notify-send -a \"Pomodoro-app-cli\" \"Pomodoro\" \"message to show\" -i terminal -t 5000\n            ```\n\n        \"\"\"\n        subprocess.Popen(['notify-send', '-a', 'Pomodoro-app-cli', 'Pomodoro', message, '-i', 'terminal', '-t', '5000'], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)\n\n    def init_config_file(self):\n        \"\"\"\n        Initialize config file to save and retrieve time of work and time of rest.\n        \"\"\"\n        if not pathlib.Path(SETTINGS_PATH).exists():\n            config = configparser.ConfigParser()\n            config['CustomTime'] = {\n                'work_time': Constants.MINUTES_TO_WORK.value,\n                'rest_time': Constants.MINUTES_TO_REST.value\n            }\n            config['Settings'] = {\n                'pause': self.pause,\n                'rest': self.rest,\n                'minute': self.minute,\n                'second': self.second,\n                'loop': self.loop,\n            }\n            with open(SETTINGS_PATH, 'w') as configfile:\n                config.write(configfile)\n\n    def prompt_config(self):\n        Config().set_config(self.set_custom_time)\n\n    @staticmethod\n    def get_config() -&gt; configparser.ConfigParser:\n        \"\"\"\n        Return config saved in config.ini file\n\n        Returns:\n            config (configparser.ConfigParser): Config object with all settings in config.ini file \n        \"\"\"\n        config = configparser.ConfigParser()\n        config.read(SETTINGS_PATH)\n        return config\n\n    def set_config(self, config: Dict[str, dict]) -&gt; None:\n        \"\"\"\n        Set configs passed in config dict to save in config.ini\n\n        Args:\n            config (Dict[str, dict]): configuration dict\n        \"\"\"\n        _config = self.get_config()\n\n        for section, conf in config.items():\n            if not _config.has_section(section):\n                _config.add_section(section)\n\n            for k, v in conf.items():\n                _config.set(section, k, str(v))\n\n        with open(SETTINGS_PATH, 'w') as configfile:\n            _config.write(configfile)\n\n    def set_custom_time(self, work_time: int = None, rest_time: int = None) -&gt; None:\n        \"\"\"\n        Set only work_time and rest_time in config.ini file\n\n        Args:\n            work_time (int, optional): time to work in minutes. Defaults to None.\n            rest_time (int, optional): time to rest in minutes. Defaults to None.\n        \"\"\"\n        SECTION = 'CustomTime'\n        config = self.get_config()\n\n        if not config.has_section(SECTION):\n            config.add_section(SECTION)\n\n        if work_time is not None:\n            config.set(SECTION, 'work_time', work_time)\n        if rest_time is not None:\n            config.set(SECTION, 'rest_time', rest_time)\n\n        with open(SETTINGS_PATH, 'w') as configfile:\n            config.write(configfile)\n\n    def save(self) -&gt; None:\n        \"\"\"\n        Notes:\n            Coming soon\n        \"\"\"\n        self.set_config(config={\n            'Settings': {\n                'pause': self.pause,\n                'rest': self.rest,\n                'minute': self.minute,\n                'second': self.second,\n                'loop': self.loop,\n            }\n        })\n\n    def update_clock(self):\n        \"\"\"\n        Notes:\n            Coming soon\n        \"\"\"\n        long_rest = False\n\n        if self.pause:\n            return\n\n        if self.second &lt; 59:\n            self.second += 1\n        else:\n            self.minute += 1\n            self.second = 0\n\n        if self.loop == 4:\n            long_rest = True\n\n        if self.minute == self.minutes_to_work:\n            self.minute = 0\n            self.second = 0\n            self.rest = True\n            self.notify(Messages.REST.value)\n            if not self.mute:\n                self.play_audio()\n\n        if self.rest and self.minute == self.minutes_to_rest and not long_rest:\n            self.minute = 0\n            self.second = 0\n            self.rest = False\n            self.loop += 1\n            self.notify(Messages.WORK.value)\n            if not self.mute:\n                self.play_audio()\n\n        elif self.rest and self.minute == Constants.MINUTES_TO_LONG_REST.value and long_rest:\n            self.minute = 0\n            self.second = 0\n            self.rest = False\n            self.loop =  0\n            long_rest = False\n            self.notify(Messages.WORK.value)\n            if not self.mute:\n                self.play_audio()\n\n    def get_center_xpos(self, text_length: int, max_x: int = None) -&gt; int:\n        \"\"\"\n        Calculate the correct horizontal position to start the text\n\n        Args:\n            text_length (int): length of text to show\n            max_x (int, optional): max length available to write the text. Defaults to None.\n\n        Returns:\n            x_pos (int): horizontal position to start text\n        \"\"\"\n        return int(((max_x or self.max_x) // 2) - (text_length // 2) - (text_length % 2))\n\n    def get_center_ypos(self, text_height: int, max_y: int = None) -&gt; int:\n        \"\"\"\n        Calculate the correct vertiocal position to start the text\n\n        Args:\n            text_height (int): height of text\n            max_y (int, optional): max length available to write the text. Defaults to None.\n\n        Returns:\n            y_pos (int): vertical position to start text\n        \"\"\"\n        return int(((max_y or self.max_y) // 2) + (text_height // 2) - (text_height % 2))\n\n    def write_work_message(self):\n        \"\"\"\n        Notes:\n            Coming soon\n        \"\"\"\n        self.window.addstr(\n            self.get_center_ypos(1),\n            self.get_center_xpos(Messages.WORK.value.__len__()),\n            Messages.WORK.value,\n            curses.A_BOLD | curses.pair_number(1)\n        )\n        self.window.refresh()\n\n    def init_panel(self):\n        \"\"\"\n        Notes:\n            Coming soon\n        \"\"\"\n        self.window.border()\n        self.window.addstr(\n            0,\n            self.get_center_xpos(Messages.WELCOME.value.__len__()),\n            Messages.WELCOME.value,\n            curses.A_BOLD | curses.color_pair(1)\n        )\n\n        self.window.attron(curses.color_pair(3) | curses.A_BOLD)\n        self.window.addstr(self.max_y - 4, 0, f' * Work time: {self.minutes_to_work} minutes ')\n        self.window.addstr(self.max_y - 3, 0, f' * Rest time: {self.minutes_to_rest} minutes ')\n\n        # === statusbar ===\n        self.window.addstr(self.max_y - 1, 1, Messages.STATUSBAR.value)\n        self.window.addstr(self.max_y - 1, len(Messages.STATUSBAR.value) + 1, \" \" * (self.max_x - len(Messages.STATUSBAR.value) - 2))\n        self.window.attroff(curses.color_pair(3))\n\n    def main(self, _):\n        \"\"\"\n        Notes:\n            Coming soon\n        \"\"\"\n        self.play_audio()\n        try:\n            while True:\n                k = self.window.getch()\n\n                if k == ord('q'):\n                    self.save()\n                    sys.exit()\n                if k == ord('p'):\n                    self.pause = not self.pause\n                    if self.pause:\n                        self.notify(Messages.NOTIFY_PAUSE.value)\n                    else:\n                        self.notify(Messages.NOTIFY_READY.value)\n\n                self.window.erase()\n                self.init_panel()\n\n                number = str(pyfiglet.figlet_format(f'{str(self.minute).zfill(2)}:{str(self.second).zfill(2)}'))\n\n                aux_y = self.get_center_ypos(len(number.split('\\n')), self.max_y // 2)\n                for line in number.split('\\n'):\n                    self.window.addstr(aux_y, self.get_center_xpos(line.__len__()), line)\n                    aux_y += 1\n\n                self.window.addstr(aux_y, self.get_center_xpos(self.info_message.__len__()), self.info_message)\n\n                self.update_clock()\n\n                self.window.refresh()\n                time.sleep(1)\n        except Exception:\n            curses.endwin()\n\n    def start(self):\n        \"\"\"\n        Notes:\n            Coming soon\n        \"\"\"\n        try:\n            curses.wrapper(self.main)\n        except curses.error:\n            print('Very small resolution, exiting...')\n        finally:\n            self.save()\n            sys.exit()\n</code></pre>"},{"location":"api/pomodoro/#pomodoro.Pomodoro.get_center_xpos","title":"<code>get_center_xpos(text_length, max_x=None)</code>","text":"<p>Calculate the correct horizontal position to start the text</p> <p>Parameters:</p> Name Type Description Default <code>text_length</code> <code>int</code> <p>length of text to show</p> required <code>max_x</code> <code>int</code> <p>max length available to write the text. Defaults to None.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>x_pos</code> <code>int</code> <p>horizontal position to start text</p> Source code in <code>pomodoro/__init__.py</code> Python<pre><code>def get_center_xpos(self, text_length: int, max_x: int = None) -&gt; int:\n    \"\"\"\n    Calculate the correct horizontal position to start the text\n\n    Args:\n        text_length (int): length of text to show\n        max_x (int, optional): max length available to write the text. Defaults to None.\n\n    Returns:\n        x_pos (int): horizontal position to start text\n    \"\"\"\n    return int(((max_x or self.max_x) // 2) - (text_length // 2) - (text_length % 2))\n</code></pre>"},{"location":"api/pomodoro/#pomodoro.Pomodoro.get_center_ypos","title":"<code>get_center_ypos(text_height, max_y=None)</code>","text":"<p>Calculate the correct vertiocal position to start the text</p> <p>Parameters:</p> Name Type Description Default <code>text_height</code> <code>int</code> <p>height of text</p> required <code>max_y</code> <code>int</code> <p>max length available to write the text. Defaults to None.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>y_pos</code> <code>int</code> <p>vertical position to start text</p> Source code in <code>pomodoro/__init__.py</code> Python<pre><code>def get_center_ypos(self, text_height: int, max_y: int = None) -&gt; int:\n    \"\"\"\n    Calculate the correct vertiocal position to start the text\n\n    Args:\n        text_height (int): height of text\n        max_y (int, optional): max length available to write the text. Defaults to None.\n\n    Returns:\n        y_pos (int): vertical position to start text\n    \"\"\"\n    return int(((max_y or self.max_y) // 2) + (text_height // 2) - (text_height % 2))\n</code></pre>"},{"location":"api/pomodoro/#pomodoro.Pomodoro.get_config","title":"<code>get_config()</code>  <code>staticmethod</code>","text":"<p>Return config saved in config.ini file</p> <p>Returns:</p> Name Type Description <code>config</code> <code>ConfigParser</code> <p>Config object with all settings in config.ini file</p> Source code in <code>pomodoro/__init__.py</code> Python<pre><code>@staticmethod\ndef get_config() -&gt; configparser.ConfigParser:\n    \"\"\"\n    Return config saved in config.ini file\n\n    Returns:\n        config (configparser.ConfigParser): Config object with all settings in config.ini file \n    \"\"\"\n    config = configparser.ConfigParser()\n    config.read(SETTINGS_PATH)\n    return config\n</code></pre>"},{"location":"api/pomodoro/#pomodoro.Pomodoro.init_config_file","title":"<code>init_config_file()</code>","text":"<p>Initialize config file to save and retrieve time of work and time of rest.</p> Source code in <code>pomodoro/__init__.py</code> Python<pre><code>def init_config_file(self):\n    \"\"\"\n    Initialize config file to save and retrieve time of work and time of rest.\n    \"\"\"\n    if not pathlib.Path(SETTINGS_PATH).exists():\n        config = configparser.ConfigParser()\n        config['CustomTime'] = {\n            'work_time': Constants.MINUTES_TO_WORK.value,\n            'rest_time': Constants.MINUTES_TO_REST.value\n        }\n        config['Settings'] = {\n            'pause': self.pause,\n            'rest': self.rest,\n            'minute': self.minute,\n            'second': self.second,\n            'loop': self.loop,\n        }\n        with open(SETTINGS_PATH, 'w') as configfile:\n            config.write(configfile)\n</code></pre>"},{"location":"api/pomodoro/#pomodoro.Pomodoro.init_panel","title":"<code>init_panel()</code>","text":"Notes <p>Coming soon</p> Source code in <code>pomodoro/__init__.py</code> Python<pre><code>def init_panel(self):\n    \"\"\"\n    Notes:\n        Coming soon\n    \"\"\"\n    self.window.border()\n    self.window.addstr(\n        0,\n        self.get_center_xpos(Messages.WELCOME.value.__len__()),\n        Messages.WELCOME.value,\n        curses.A_BOLD | curses.color_pair(1)\n    )\n\n    self.window.attron(curses.color_pair(3) | curses.A_BOLD)\n    self.window.addstr(self.max_y - 4, 0, f' * Work time: {self.minutes_to_work} minutes ')\n    self.window.addstr(self.max_y - 3, 0, f' * Rest time: {self.minutes_to_rest} minutes ')\n\n    # === statusbar ===\n    self.window.addstr(self.max_y - 1, 1, Messages.STATUSBAR.value)\n    self.window.addstr(self.max_y - 1, len(Messages.STATUSBAR.value) + 1, \" \" * (self.max_x - len(Messages.STATUSBAR.value) - 2))\n    self.window.attroff(curses.color_pair(3))\n</code></pre>"},{"location":"api/pomodoro/#pomodoro.Pomodoro.main","title":"<code>main(_)</code>","text":"Notes <p>Coming soon</p> Source code in <code>pomodoro/__init__.py</code> Python<pre><code>def main(self, _):\n    \"\"\"\n    Notes:\n        Coming soon\n    \"\"\"\n    self.play_audio()\n    try:\n        while True:\n            k = self.window.getch()\n\n            if k == ord('q'):\n                self.save()\n                sys.exit()\n            if k == ord('p'):\n                self.pause = not self.pause\n                if self.pause:\n                    self.notify(Messages.NOTIFY_PAUSE.value)\n                else:\n                    self.notify(Messages.NOTIFY_READY.value)\n\n            self.window.erase()\n            self.init_panel()\n\n            number = str(pyfiglet.figlet_format(f'{str(self.minute).zfill(2)}:{str(self.second).zfill(2)}'))\n\n            aux_y = self.get_center_ypos(len(number.split('\\n')), self.max_y // 2)\n            for line in number.split('\\n'):\n                self.window.addstr(aux_y, self.get_center_xpos(line.__len__()), line)\n                aux_y += 1\n\n            self.window.addstr(aux_y, self.get_center_xpos(self.info_message.__len__()), self.info_message)\n\n            self.update_clock()\n\n            self.window.refresh()\n            time.sleep(1)\n    except Exception:\n        curses.endwin()\n</code></pre>"},{"location":"api/pomodoro/#pomodoro.Pomodoro.notify","title":"<code>notify(message)</code>","text":"<p>Show a popup notification in linux using notify-send</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>message to show in notification popup</p> required <p>Code used</p> Bash<pre><code>notify-send -a \"Pomodoro-app-cli\" \"Pomodoro\" \"message to show\" -i terminal -t 5000\n</code></pre> Source code in <code>pomodoro/__init__.py</code> Python<pre><code>def notify(self, message: str):\n    \"\"\"Show a popup notification in linux using notify-send\n\n    Args:\n        message (str): message to show in notification popup\n\n    !!! tip \"Code used\"\n\n        ```sh\n        notify-send -a \"Pomodoro-app-cli\" \"Pomodoro\" \"message to show\" -i terminal -t 5000\n        ```\n\n    \"\"\"\n    subprocess.Popen(['notify-send', '-a', 'Pomodoro-app-cli', 'Pomodoro', message, '-i', 'terminal', '-t', '5000'], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)\n</code></pre>"},{"location":"api/pomodoro/#pomodoro.Pomodoro.play_audio","title":"<code>play_audio()</code>","text":"<p>Play sound of audio.wav using aplay linux command like:</p> <p>Code used</p> Bash<pre><code>aplay audio.wav --duration 2\n</code></pre> Source code in <code>pomodoro/__init__.py</code> Python<pre><code>def play_audio(self):\n    \"\"\"\n    Play sound of audio.wav using aplay linux command like:\n\n    !!! tip \"Code used\"\n        ```sh\n        aplay audio.wav --duration 2\n        ```\n    \"\"\"\n    subprocess.Popen(['aplay', f'{PACKAGE_DIR}/audio.wav', '--duration', '2'], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)\n</code></pre>"},{"location":"api/pomodoro/#pomodoro.Pomodoro.save","title":"<code>save()</code>","text":"Notes <p>Coming soon</p> Source code in <code>pomodoro/__init__.py</code> Python<pre><code>def save(self) -&gt; None:\n    \"\"\"\n    Notes:\n        Coming soon\n    \"\"\"\n    self.set_config(config={\n        'Settings': {\n            'pause': self.pause,\n            'rest': self.rest,\n            'minute': self.minute,\n            'second': self.second,\n            'loop': self.loop,\n        }\n    })\n</code></pre>"},{"location":"api/pomodoro/#pomodoro.Pomodoro.set_config","title":"<code>set_config(config)</code>","text":"<p>Set configs passed in config dict to save in config.ini</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>Dict[str, dict]</code> <p>configuration dict</p> required Source code in <code>pomodoro/__init__.py</code> Python<pre><code>def set_config(self, config: Dict[str, dict]) -&gt; None:\n    \"\"\"\n    Set configs passed in config dict to save in config.ini\n\n    Args:\n        config (Dict[str, dict]): configuration dict\n    \"\"\"\n    _config = self.get_config()\n\n    for section, conf in config.items():\n        if not _config.has_section(section):\n            _config.add_section(section)\n\n        for k, v in conf.items():\n            _config.set(section, k, str(v))\n\n    with open(SETTINGS_PATH, 'w') as configfile:\n        _config.write(configfile)\n</code></pre>"},{"location":"api/pomodoro/#pomodoro.Pomodoro.set_custom_time","title":"<code>set_custom_time(work_time=None, rest_time=None)</code>","text":"<p>Set only work_time and rest_time in config.ini file</p> <p>Parameters:</p> Name Type Description Default <code>work_time</code> <code>int</code> <p>time to work in minutes. Defaults to None.</p> <code>None</code> <code>rest_time</code> <code>int</code> <p>time to rest in minutes. Defaults to None.</p> <code>None</code> Source code in <code>pomodoro/__init__.py</code> Python<pre><code>def set_custom_time(self, work_time: int = None, rest_time: int = None) -&gt; None:\n    \"\"\"\n    Set only work_time and rest_time in config.ini file\n\n    Args:\n        work_time (int, optional): time to work in minutes. Defaults to None.\n        rest_time (int, optional): time to rest in minutes. Defaults to None.\n    \"\"\"\n    SECTION = 'CustomTime'\n    config = self.get_config()\n\n    if not config.has_section(SECTION):\n        config.add_section(SECTION)\n\n    if work_time is not None:\n        config.set(SECTION, 'work_time', work_time)\n    if rest_time is not None:\n        config.set(SECTION, 'rest_time', rest_time)\n\n    with open(SETTINGS_PATH, 'w') as configfile:\n        config.write(configfile)\n</code></pre>"},{"location":"api/pomodoro/#pomodoro.Pomodoro.start","title":"<code>start()</code>","text":"Notes <p>Coming soon</p> Source code in <code>pomodoro/__init__.py</code> Python<pre><code>def start(self):\n    \"\"\"\n    Notes:\n        Coming soon\n    \"\"\"\n    try:\n        curses.wrapper(self.main)\n    except curses.error:\n        print('Very small resolution, exiting...')\n    finally:\n        self.save()\n        sys.exit()\n</code></pre>"},{"location":"api/pomodoro/#pomodoro.Pomodoro.update","title":"<code>update()</code>  <code>staticmethod</code>","text":"<p>Update the pomodoro application like:</p> <p>Code used</p> Bash<pre><code>pip install --upgrade pomodoro-app-cli\n</code></pre> Source code in <code>pomodoro/__init__.py</code> Python<pre><code>@staticmethod\ndef update() -&gt; None:\n    \"\"\"\n    Update the pomodoro application like:\n\n    !!! tip \"Code used\"\n        ``` sh\n        pip install --upgrade pomodoro-app-cli\n        ```\n    \"\"\"\n    Config().update(lambda: subprocess.check_output(['pip', 'install', '--upgrade', 'pomodoro-app-cli', '--break-system-packages']))\n    Pomodoro.version(show=True)\n    # subprocess.Popen(['pip', 'install', '--upgrade', 'pomodoro-app-cli', '--break-system-packages'])\n    sys.exit()\n</code></pre>"},{"location":"api/pomodoro/#pomodoro.Pomodoro.update_clock","title":"<code>update_clock()</code>","text":"Notes <p>Coming soon</p> Source code in <code>pomodoro/__init__.py</code> Python<pre><code>def update_clock(self):\n    \"\"\"\n    Notes:\n        Coming soon\n    \"\"\"\n    long_rest = False\n\n    if self.pause:\n        return\n\n    if self.second &lt; 59:\n        self.second += 1\n    else:\n        self.minute += 1\n        self.second = 0\n\n    if self.loop == 4:\n        long_rest = True\n\n    if self.minute == self.minutes_to_work:\n        self.minute = 0\n        self.second = 0\n        self.rest = True\n        self.notify(Messages.REST.value)\n        if not self.mute:\n            self.play_audio()\n\n    if self.rest and self.minute == self.minutes_to_rest and not long_rest:\n        self.minute = 0\n        self.second = 0\n        self.rest = False\n        self.loop += 1\n        self.notify(Messages.WORK.value)\n        if not self.mute:\n            self.play_audio()\n\n    elif self.rest and self.minute == Constants.MINUTES_TO_LONG_REST.value and long_rest:\n        self.minute = 0\n        self.second = 0\n        self.rest = False\n        self.loop =  0\n        long_rest = False\n        self.notify(Messages.WORK.value)\n        if not self.mute:\n            self.play_audio()\n</code></pre>"},{"location":"api/pomodoro/#pomodoro.Pomodoro.version","title":"<code>version(show=False)</code>  <code>staticmethod</code>","text":"<p>Return or print the current version of pomodoro</p> <p>Attributes:</p> Name Type Description <code>show</code> <code>bool</code> <p>return version and print in screen</p> <p>Returns:</p> Name Type Description <code>version</code> <code>str</code> <p>the version number</p> Source code in <code>pomodoro/__init__.py</code> Python<pre><code>@staticmethod\ndef version(show: bool = False) -&gt; str:\n    \"\"\"\n    Return or print the current version of pomodoro\n\n    Attributes:\n        show (bool): return version and print in screen\n\n    Returns:\n        version (str): the version number\n    \"\"\"\n    version = importlib.metadata.version(\"pomodoro-app-cli\")\n    if show:\n        print(f'\u2728 {version}')\n    return version\n</code></pre>"},{"location":"api/pomodoro/#pomodoro.Pomodoro.write_work_message","title":"<code>write_work_message()</code>","text":"Notes <p>Coming soon</p> Source code in <code>pomodoro/__init__.py</code> Python<pre><code>def write_work_message(self):\n    \"\"\"\n    Notes:\n        Coming soon\n    \"\"\"\n    self.window.addstr(\n        self.get_center_ypos(1),\n        self.get_center_xpos(Messages.WORK.value.__len__()),\n        Messages.WORK.value,\n        curses.A_BOLD | curses.pair_number(1)\n    )\n    self.window.refresh()\n</code></pre>"}]}